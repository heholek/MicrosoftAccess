Option Compare Database
Option Explicit

' Reference: Microsoft Visual Basic for Applications Extensibility 3.5

Dim gfso As New Scripting.FileSystemObject

Public Function ExportLibrary(Optional createFolder As Boolean = False, Optional startsWith As String = "om", Optional filenameWithTimestamp As Boolean = False) As String
Dim c As VBComponent
Dim sfx As String
Dim ts As String
Dim fn As String
Dim path As String

    ts = omDateFunctions.GetTimeStamp(Now)
    path = CurrentProject.path
    If createFolder Then
        path = gfso.BuildPath(path, ts)
        If Not gfso.FolderExists(path) Then
            gfso.createFolder path
        End If
    End If
    ExportLibrary = path
    For Each c In Application.VBE.VBProjects(1).VBComponents
        Select Case c.Type
            Case vbext_ct_ClassModule, vbext_ct_Document
                sfx = ".cls"
            Case vbext_ct_MSForm
                sfx = ".frm"
            Case vbext_ct_StdModule
                sfx = ".bas"
            Case Else
                sfx = ""
        End Select
        If sfx <> "" And StrComp(Left(c.Name, Len(startsWith)), startsWith, vbBinaryCompare) = 0 Then
            fn = path & "\" & c.Name & IIf(filenameWithTimestamp, "_" & ts, "") & sfx
            c.Export filename:=fn
        End If
    Next c

End Function

Public Sub ImportLibrary(Optional backupComponents As Boolean = True, Optional useUpdatesFolder As Boolean = True, Optional deleteAfterImport As Boolean = True)
Dim cNew As VBComponent
Dim sfx As String
Dim fn As String
Dim f As File
Dim path As String
Dim oName As String
Dim OType As AcObjectType

    path = CurrentProject.path
    If useUpdatesFolder Then
        path = gfso.BuildPath(path, "Updates")
        If Not gfso.FolderExists(path) Then
            MsgBox "Updates Folder does not exist: " & path
            Exit Sub
        End If
    End If
    For Each f In gfso.GetFolder(path).Files
        sfx = gfso.GetExtensionName(f.Name)
        Select Case sfx
            Case "cls"
                OType = acModule
            Case "frm"
                OType = acForm
            Case "bas"
                OType = acModule
            Case Else
                OType = 0
        End Select
        If OType <> 0 And StrComp(Left(f.Name, 2), "om", vbBinaryCompare) = 0 And f.Name <> "omLibraryFunctions.bas" Then
            oName = Left(f.Name, Len(f.Name) - Len(sfx) - 1)
            If backupComponents Then
                'DoCmd.DeleteObject oType, oName
                'cNew.Name = oName
                'DoCmd.Save oType, objectname:=oName
            End If
            Set cNew = Application.VBE.VBProjects(1).VBComponents.import(f.path)
            If deleteAfterImport Then
                gfso.DeleteFile fn
            End If

        End If
    Next
End Sub

Public Sub UpdateLibrary(Optional backupComponents As Boolean = True, Optional useUpdatesFolder As Boolean = True, Optional deleteAfterUpdate As Boolean = True)
Dim c As VBComponent
Dim cNew As VBComponent
Dim sfx As String
Dim fn As String
Dim path As String
Dim oName As String
Dim OType As AcObjectType

    path = CurrentProject.path
    If useUpdatesFolder Then
        path = gfso.BuildPath(path, "Updates")
        If Not gfso.FolderExists(path) Then
            MsgBox "Updates Folder does not exist: " & path
            Exit Sub
        End If
    End If
    For Each c In Application.VBE.VBProjects(1).VBComponents
        Select Case c.Type
            Case vbext_ct_ClassModule, vbext_ct_Document
                sfx = ".cls"
                OType = acModule
            Case vbext_ct_MSForm
                sfx = ".frm"
                OType = acForm
            Case vbext_ct_StdModule
                sfx = ".bas"
                OType = acModule
            Case Else
                sfx = ""
        End Select
        If sfx <> "" And StrComp(Left(c.Name, 2), "om", vbBinaryCompare) = 0 Then
            oName = c.Name
            fn = path & "\" & oName & sfx
            If gfso.FileExists(fn) Then
                Set cNew = Application.VBE.VBProjects(1).VBComponents.import(fn)
                'DoCmd.DeleteObject oType, oName
                'cNew.Name = oName
                'DoCmd.Save oType, objectname:=oName
                If deleteAfterUpdate Then
                    gfso.DeleteFile fn
                End If
            End If
        End If
    Next c

End Sub

' RemoveEqualFiles "C:\Users\JaRa\OneDrive\Shared\Kybucs\LibraryCompare\","C:\Users\JaRa\OneDrive\Shared\Kybucs\Library\"

Public Sub RemoveEqualFiles(sourcePath As String, destinationPath As String, Optional moveFile As Boolean = False)
Dim sFolder As Scripting.Folder
Dim sf As File
Dim DF As File
Dim sourceFound As Boolean
Dim i As Long
Dim destinationFilename As String
Dim sString As String
Dim dString As String

    For Each DF In gfso.GetFolder(destinationPath).Files
        destinationFilename = omFileFunctions.RemoveExtension(DF.Name)
        i = 1
        sourceFound = False
        Set sFolder = gfso.GetFolder(sourcePath)
        
        For Each sf In sFolder.Files
            If InStr(1, sf.Name, destinationFilename) = 1 Then
                'dString = omFileFunctions.ReadFileToString(DF.path)
                'sString = omFileFunctions.ReadFileToString(sf.path)
                'sString = LCase(omStringFunctions.CleanStringUsingPattern(sString))
                'dString = LCase(omStringFunctions.CleanStringUsingPattern(dString))
                If dString = sString Then
                    sf.Delete
                Else
                    If moveFile Then
                        sf.Move gfso.BuildPath(destinationPath, sf.Name)
                    End If
                End If
                Exit For
            End If
        Next
    Next
End Sub

Public Sub LoadFromText(objectType As AcObjectType, objectName As String, filename As String)
    'Application.LoadFromText AcObjectType.acModule, "omLibraryFunctions", "\\sql01\data\ACenter\2007\ACenter_9002_JaRa_Updates\omLibraryFunctions.bas"
    Application.LoadFromText objectType, objectName, filename
End Sub
Public Sub LoadAsAXL(objectType As AcObjectType, objectName As String, filename As String)
    'Application.LoadFromText AcObjectType.acModule, "omLibraryFunctions", "\\sql01\data\ACenter\2007\ACenter_9002_JaRa_Updates\omLibraryFunctions.bas"
    MsgBox "Does not exist in version 2007"
    'Application.LoadAsAXL objectType, objectName, fileName
End Sub

Public Sub SaveAsText(objectType As AcObjectType, objectName As String, filename As String)
    'Application.SaveAsText  AcObjectType.acModule, "omLibraryFunctions", "\\sql01\data\ACenter\2007\ACenter_9002_JaRa_Updates\omLibraryFunctions.bas"
    Application.SaveAsText objectType, objectName, filename
End Sub
Public Sub SaveAsAXL(objectType As AcObjectType, objectName As String, filename As String)
    'Application.SaveAsText  AcObjectType.acModule, "omLibraryFunctions", "\\sql01\data\ACenter\2007\ACenter_9002_JaRa_Updates\omLibraryFunctions.bas"
    MsgBox "Does not exist in version 2007"
    'Application.SaveAsAXL objectType, objectName, fileName
End Sub

Public Sub ExportFormControlProperties(formName As String, Optional writeToFile As Boolean = False, Optional controlEscaped As Boolean = False)
Dim f As Form
Dim c As Control
Dim S1 As String
Dim S2 As String
Dim cEscapedStart As String
Dim cEscapedEnd As String
Dim cName As String

    If controlEscaped Then
        cEscapedStart = "Controls(" & Chr(34)
        cEscapedEnd = Chr(34) & ")"
    End If
    DoCmd.OpenForm formName, acDesign, , , , acHidden
    Set f = Forms(formName)
    S1 = "Public Sub SetDefaultControlProperties()" & vbCrLf
    S2 = "Public Sub SetMinimumControlProperties(minTop as long, minLeft as long, minWidth as long, minHeight as long)" & vbCrLf
    For Each c In f.Controls
        S1 = S1 & "' ------ " & c.Name & vbCrLf
        cName = cEscapedStart & c.Name & cEscapedEnd
        S1 = S1 & "me." & cName & ".Visible=" & c.Visible & vbCrLf
        S1 = S1 & "me." & cName & ".Top=" & c.Top & vbCrLf
        S1 = S1 & "me." & cName & ".Left=" & c.Left & vbCrLf
        S1 = S1 & "me." & cName & ".Width=" & c.Width & vbCrLf
        S1 = S1 & "me." & cName & ".Height=" & c.Height & vbCrLf
        
        S2 = S2 & "' ------ " & c.Name & vbCrLf
        S2 = S2 & "me." & cName & ".Visible=false" & vbCrLf
        S2 = S2 & "me." & cName & ".Top=minTop" & vbCrLf
        S2 = S2 & "me." & cName & ".Left=minLeft" & vbCrLf
        S2 = S2 & "me." & cName & ".Width=minWidth" & vbCrLf
        S2 = S2 & "me." & cName & ".Height=minHeight" & vbCrLf
    Next
    S1 = S1 & "End Sub" & vbCrLf
    S2 = S2 & "End Sub" & vbCrLf
    If writeToFile Then
        omFileFunctions.WriteStringToFile gfso.BuildPath(CurrentProject.path, "ExportFormControlProperties_" & formName & "_" & omDateFunctions.GetTimeStamp) & ".txt", S1 & vbCrLf & S2
    Else
        Debug.Print S1 & vbCrLf & S2
    End If
    DoCmd.Close acForm, formName, acSaveNo
End Sub

Public Sub Dump()
Dim path As String
Dim O As Object
Dim currentPath As String

    path = gfso.BuildPath(CurrentProject.path, "Dump_" & omDateFunctions.GetTimeStamp)
    omFileFunctions.CreateFolderPath path
    currentPath = gfso.BuildPath(path, "Queries")
    omFileFunctions.CreateFolderPath currentPath
    For Each O In Application.CodeData.AllQueries
        omLibraryFunctions.SaveAsText acQuery, O.Name, gfso.BuildPath(currentPath, O.Name & ".txt")
    Next
    
    currentPath = gfso.BuildPath(path, "Forms")
    omFileFunctions.CreateFolderPath currentPath
    For Each O In Application.CodeProject.AllForms
        omLibraryFunctions.SaveAsText acForm, O.Name, gfso.BuildPath(currentPath, O.Name & ".txt")
    Next

    currentPath = gfso.BuildPath(path, "Reports")
    omFileFunctions.CreateFolderPath currentPath
    For Each O In Application.CodeProject.AllReports
        omLibraryFunctions.SaveAsText acReport, O.Name, gfso.BuildPath(currentPath, O.Name & ".txt")
    Next
    
    currentPath = gfso.BuildPath(path, "Modules")
    omFileFunctions.CreateFolderPath currentPath
    For Each O In Application.CodeProject.AllModules
        omLibraryFunctions.SaveAsText acModule, O.Name, gfso.BuildPath(currentPath, O.Name & ".txt")
    Next
    
    currentPath = gfso.BuildPath(path, "Macros")
    omFileFunctions.CreateFolderPath currentPath
    For Each O In Application.CodeProject.AllMacros
        omLibraryFunctions.SaveAsText acMacro, O.Name, gfso.BuildPath(currentPath, O.Name & ".txt")
    Next
End Sub